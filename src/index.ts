/**
 * @package html-to-pdf-node
 * @author Namindu Ranathunga
 * @version 1.0.0
 * 2024 
 * The original code was converted to typescript and changed by Namindu Ranathunga.
 * Originally written by Shyam Hajare <hajareshyam@gmail.com>
 */

import * as ejs from 'ejs';
import * as pdf from 'html-pdf';
import * as fs from 'fs';


export interface Document {
    html: string;
    data: any;
    render?: boolean;
    path?: string;
    type?: 'buffer' | 'stream' | 'file';
}

export interface Options extends pdf.CreateOptions {}


/**
 * create function is used to create pdf from ejs templates.
 * @param  {document, options}
 * @return {callback}
 */

export const create = (document:Document, options: Options) : Promise<pdf.FileInfo|Buffer|fs.ReadStream> => {
    return new Promise((resolve, reject) => {
      if (!document || !document.html || !document.data) {
        reject(new Error("Some, or all, options are missing."));
      }
      // Compiles a template
      var html = (document.render !== false)?ejs.render(document.html, document.data):document.html; // default is true - will use ejs.render
      var pdfPromise = pdf.create(html, options);
  
      // Create PDF from html template generated by ejs
      // Output will be PDF file
  
      switch (document.type) {
        case "buffer":
          pdfPromise.toBuffer((err, res) => {
            if (!err) resolve(res);
            else reject(err);
          });
          break;
  
        case "stream":
          pdfPromise.toStream((err, res) => {
            if (!err) resolve(res);
            else reject(err);
          });
          break;
  
        default:
          pdfPromise.toFile(document.path, (err, res) => {
            if (!err) resolve(res);
            else reject(err);
          });
          break;
      }
    });
};
